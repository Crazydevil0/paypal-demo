/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuccessRouteImport } from './routes/success'
import { Route as StatusRouteImport } from './routes/status'
import { Route as SolutionsRouteImport } from './routes/solutions'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PpcpVideoRouteImport } from './routes/ppcp-video'
import { Route as PpcpIntroRouteImport } from './routes/ppcp-intro'
import { Route as PpcpBenefitsRouteImport } from './routes/ppcp-benefits'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as ChannelsRouteImport } from './routes/channels'
import { Route as ChallengesRouteImport } from './routes/challenges'
import { Route as BraintreeVideoRouteImport } from './routes/braintree-video'
import { Route as BraintreeIntroRouteImport } from './routes/braintree-intro'
import { Route as BraintreeBenefitsRouteImport } from './routes/braintree-benefits'
import { Route as AdminJourneysRouteImport } from './routes/admin-journeys'
import { Route as IndexRouteImport } from './routes/index'

const SuccessRoute = SuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => rootRouteImport,
} as any)
const StatusRoute = StatusRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRouteImport,
} as any)
const SolutionsRoute = SolutionsRouteImport.update({
  id: '/solutions',
  path: '/solutions',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PpcpVideoRoute = PpcpVideoRouteImport.update({
  id: '/ppcp-video',
  path: '/ppcp-video',
  getParentRoute: () => rootRouteImport,
} as any)
const PpcpIntroRoute = PpcpIntroRouteImport.update({
  id: '/ppcp-intro',
  path: '/ppcp-intro',
  getParentRoute: () => rootRouteImport,
} as any)
const PpcpBenefitsRoute = PpcpBenefitsRouteImport.update({
  id: '/ppcp-benefits',
  path: '/ppcp-benefits',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsRoute = ChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesRoute = ChallengesRouteImport.update({
  id: '/challenges',
  path: '/challenges',
  getParentRoute: () => rootRouteImport,
} as any)
const BraintreeVideoRoute = BraintreeVideoRouteImport.update({
  id: '/braintree-video',
  path: '/braintree-video',
  getParentRoute: () => rootRouteImport,
} as any)
const BraintreeIntroRoute = BraintreeIntroRouteImport.update({
  id: '/braintree-intro',
  path: '/braintree-intro',
  getParentRoute: () => rootRouteImport,
} as any)
const BraintreeBenefitsRoute = BraintreeBenefitsRouteImport.update({
  id: '/braintree-benefits',
  path: '/braintree-benefits',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminJourneysRoute = AdminJourneysRouteImport.update({
  id: '/admin-journeys',
  path: '/admin-journeys',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin-journeys': typeof AdminJourneysRoute
  '/braintree-benefits': typeof BraintreeBenefitsRoute
  '/braintree-intro': typeof BraintreeIntroRoute
  '/braintree-video': typeof BraintreeVideoRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/ppcp-benefits': typeof PpcpBenefitsRoute
  '/ppcp-intro': typeof PpcpIntroRoute
  '/ppcp-video': typeof PpcpVideoRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
  '/status': typeof StatusRoute
  '/success': typeof SuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin-journeys': typeof AdminJourneysRoute
  '/braintree-benefits': typeof BraintreeBenefitsRoute
  '/braintree-intro': typeof BraintreeIntroRoute
  '/braintree-video': typeof BraintreeVideoRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/ppcp-benefits': typeof PpcpBenefitsRoute
  '/ppcp-intro': typeof PpcpIntroRoute
  '/ppcp-video': typeof PpcpVideoRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
  '/status': typeof StatusRoute
  '/success': typeof SuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin-journeys': typeof AdminJourneysRoute
  '/braintree-benefits': typeof BraintreeBenefitsRoute
  '/braintree-intro': typeof BraintreeIntroRoute
  '/braintree-video': typeof BraintreeVideoRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/ppcp-benefits': typeof PpcpBenefitsRoute
  '/ppcp-intro': typeof PpcpIntroRoute
  '/ppcp-video': typeof PpcpVideoRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
  '/status': typeof StatusRoute
  '/success': typeof SuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin-journeys'
    | '/braintree-benefits'
    | '/braintree-intro'
    | '/braintree-video'
    | '/challenges'
    | '/channels'
    | '/contact'
    | '/ppcp-benefits'
    | '/ppcp-intro'
    | '/ppcp-video'
    | '/profile'
    | '/solutions'
    | '/status'
    | '/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin-journeys'
    | '/braintree-benefits'
    | '/braintree-intro'
    | '/braintree-video'
    | '/challenges'
    | '/channels'
    | '/contact'
    | '/ppcp-benefits'
    | '/ppcp-intro'
    | '/ppcp-video'
    | '/profile'
    | '/solutions'
    | '/status'
    | '/success'
  id:
    | '__root__'
    | '/'
    | '/admin-journeys'
    | '/braintree-benefits'
    | '/braintree-intro'
    | '/braintree-video'
    | '/challenges'
    | '/channels'
    | '/contact'
    | '/ppcp-benefits'
    | '/ppcp-intro'
    | '/ppcp-video'
    | '/profile'
    | '/solutions'
    | '/status'
    | '/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminJourneysRoute: typeof AdminJourneysRoute
  BraintreeBenefitsRoute: typeof BraintreeBenefitsRoute
  BraintreeIntroRoute: typeof BraintreeIntroRoute
  BraintreeVideoRoute: typeof BraintreeVideoRoute
  ChallengesRoute: typeof ChallengesRoute
  ChannelsRoute: typeof ChannelsRoute
  ContactRoute: typeof ContactRoute
  PpcpBenefitsRoute: typeof PpcpBenefitsRoute
  PpcpIntroRoute: typeof PpcpIntroRoute
  PpcpVideoRoute: typeof PpcpVideoRoute
  ProfileRoute: typeof ProfileRoute
  SolutionsRoute: typeof SolutionsRoute
  StatusRoute: typeof StatusRoute
  SuccessRoute: typeof SuccessRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/solutions': {
      id: '/solutions'
      path: '/solutions'
      fullPath: '/solutions'
      preLoaderRoute: typeof SolutionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ppcp-video': {
      id: '/ppcp-video'
      path: '/ppcp-video'
      fullPath: '/ppcp-video'
      preLoaderRoute: typeof PpcpVideoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ppcp-intro': {
      id: '/ppcp-intro'
      path: '/ppcp-intro'
      fullPath: '/ppcp-intro'
      preLoaderRoute: typeof PpcpIntroRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ppcp-benefits': {
      id: '/ppcp-benefits'
      path: '/ppcp-benefits'
      fullPath: '/ppcp-benefits'
      preLoaderRoute: typeof PpcpBenefitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges': {
      id: '/challenges'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/braintree-video': {
      id: '/braintree-video'
      path: '/braintree-video'
      fullPath: '/braintree-video'
      preLoaderRoute: typeof BraintreeVideoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/braintree-intro': {
      id: '/braintree-intro'
      path: '/braintree-intro'
      fullPath: '/braintree-intro'
      preLoaderRoute: typeof BraintreeIntroRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/braintree-benefits': {
      id: '/braintree-benefits'
      path: '/braintree-benefits'
      fullPath: '/braintree-benefits'
      preLoaderRoute: typeof BraintreeBenefitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin-journeys': {
      id: '/admin-journeys'
      path: '/admin-journeys'
      fullPath: '/admin-journeys'
      preLoaderRoute: typeof AdminJourneysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminJourneysRoute: AdminJourneysRoute,
  BraintreeBenefitsRoute: BraintreeBenefitsRoute,
  BraintreeIntroRoute: BraintreeIntroRoute,
  BraintreeVideoRoute: BraintreeVideoRoute,
  ChallengesRoute: ChallengesRoute,
  ChannelsRoute: ChannelsRoute,
  ContactRoute: ContactRoute,
  PpcpBenefitsRoute: PpcpBenefitsRoute,
  PpcpIntroRoute: PpcpIntroRoute,
  PpcpVideoRoute: PpcpVideoRoute,
  ProfileRoute: ProfileRoute,
  SolutionsRoute: SolutionsRoute,
  StatusRoute: StatusRoute,
  SuccessRoute: SuccessRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
