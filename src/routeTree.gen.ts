/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SolutionsRouteImport } from './routes/solutions'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as ChannelsRouteImport } from './routes/channels'
import { Route as ChallengesRouteImport } from './routes/challenges'
import { Route as IndexRouteImport } from './routes/index'

const SolutionsRoute = SolutionsRouteImport.update({
  id: '/solutions',
  path: '/solutions',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsRoute = ChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesRoute = ChallengesRouteImport.update({
  id: '/challenges',
  path: '/challenges',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/channels': typeof ChannelsRoute
  '/contact': typeof ContactRoute
  '/profile': typeof ProfileRoute
  '/solutions': typeof SolutionsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/challenges'
    | '/channels'
    | '/contact'
    | '/profile'
    | '/solutions'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/challenges' | '/channels' | '/contact' | '/profile' | '/solutions'
  id:
    | '__root__'
    | '/'
    | '/challenges'
    | '/channels'
    | '/contact'
    | '/profile'
    | '/solutions'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChallengesRoute: typeof ChallengesRoute
  ChannelsRoute: typeof ChannelsRoute
  ContactRoute: typeof ContactRoute
  ProfileRoute: typeof ProfileRoute
  SolutionsRoute: typeof SolutionsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/solutions': {
      id: '/solutions'
      path: '/solutions'
      fullPath: '/solutions'
      preLoaderRoute: typeof SolutionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges': {
      id: '/challenges'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChallengesRoute: ChallengesRoute,
  ChannelsRoute: ChannelsRoute,
  ContactRoute: ContactRoute,
  ProfileRoute: ProfileRoute,
  SolutionsRoute: SolutionsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
